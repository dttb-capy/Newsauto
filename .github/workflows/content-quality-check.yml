name: Content Quality Check

on:
  schedule:
    - cron: '0 8 * * *'  # Daily at 8am UTC
  workflow_dispatch:
    inputs:
      sample_rate:
        description: 'Sample rate (0.0-1.0)'
        required: false
        default: '0.10'
      days_back:
        description: 'Days to look back'
        required: false
        default: '1'

jobs:
  quality-check:
    name: Run Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run quality scoring
        id: quality
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          python scripts/quality_score.py \
            --sample-rate ${{ github.event.inputs.sample_rate || '0.10' }} \
            --days-back ${{ github.event.inputs.days_back || '1' }} \
            --output json > quality-report.json

          # Extract key metrics
          avg_score=$(cat quality-report.json | jq -r '.average_quality_score')
          flagged=$(cat quality-report.json | jq -r '.flagged')
          sampled=$(cat quality-report.json | jq -r '.sampled')

          echo "avg_score=$avg_score" >> $GITHUB_OUTPUT
          echo "flagged=$flagged" >> $GITHUB_OUTPUT
          echo "sampled=$sampled" >> $GITHUB_OUTPUT

          # Save full report
          cat quality-report.json

      - name: Check quality threshold
        id: threshold
        run: |
          avg_score=${{ steps.quality.outputs.avg_score }}
          flagged=${{ steps.quality.outputs.flagged }}
          sampled=${{ steps.quality.outputs.sampled }}

          # Calculate flagged percentage
          flagged_pct=$(echo "scale=2; $flagged / $sampled * 100" | bc)

          echo "Quality score: $avg_score"
          echo "Flagged: $flagged/$sampled ($flagged_pct%)"

          # Fail if quality below threshold or too many flagged
          if (( $(echo "$avg_score < 0.75" | bc -l) )) || (( $(echo "$flagged_pct > 15" | bc -l) )); then
            echo "threshold_breached=true" >> $GITHUB_OUTPUT
            echo "❌ Quality threshold breached!"
            exit 1
          else
            echo "threshold_breached=false" >> $GITHUB_OUTPUT
            echo "✅ Quality check passed"
          fi

      - name: Upload quality report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: quality-report-${{ github.run_number }}
          path: quality-report.json

      - name: Create quality issue (if threshold breached)
        if: failure() && steps.threshold.outputs.threshold_breached == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));

            const body = `
            ## ⚠️ Content Quality Alert

            **Date**: ${report.timestamp}
            **Average Quality Score**: ${report.average_quality_score}
            **Flagged Items**: ${report.flagged}/${report.sampled} (${Math.round(report.flagged/report.sampled*100)}%)

            ### Flagged Content

            ${report.flagged_items.map(item =>
              `- Content #${item.content_id}: Score ${item.quality_score} - ${item.flags.join(', ')}`
            ).join('\n')}

            ### Action Required

            Please review the flagged content items for:
            - Potential hallucinations
            - Factual inaccuracies
            - Sentiment bias

            [View full report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Content Quality Alert - ${report.flagged} items flagged`,
              body: body,
              labels: ['quality-review', 'urgent']
            });

      - name: Comment on open quality issues
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN}}
          script: |
            // Find open quality-review issues
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'quality-review'
            });

            if (issues.length > 0) {
              const comment = `✅ Latest quality check passed (avg score: ${{ steps.quality.outputs.avg_score }})`;

              for (const issue of issues) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: comment
                });
              }
            }

  update-metrics:
    name: Update Quality Metrics
    runs-on: ubuntu-latest
    needs: quality-check
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Download quality report
        uses: actions/download-artifact@v3
        with:
          name: quality-report-${{ github.run_number }}

      - name: Update metrics file
        run: |
          # Create or update metrics tracking file
          mkdir -p metrics
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          cat quality-report.json | jq ". + {timestamp: \"$timestamp\"}" >> metrics/quality-history.jsonl

          echo "📊 Metrics updated"

      - name: Commit metrics
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add metrics/
          git commit -m "chore: update quality metrics [skip ci]" || echo "No changes to commit"
          git push || echo "Nothing to push"
