name: Comprehensive Test Suite

on:
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security

jobs:
  unit-tests:
    name: Unit Tests - Full Coverage
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event_name == 'schedule' }}

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-timeout

    - name: Run unit tests with coverage
      env:
        DATABASE_URL: sqlite:///./test.db
        TESTING: true
      run: |
        pytest tests/ -v \
          --cov=newsauto \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --timeout=60 \
          -m "not integration and not e2e and not slow"

    - name: Generate coverage badge
      run: |
        coverage-badge -o coverage.svg -f
      continue-on-error: true

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-py${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          coverage.svg

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event_name == 'schedule' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: newsletter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mailhog:
        image: mailhog/mailhog:latest
        ports:
          - 1025:1025
          - 8025:8025

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Setup database
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/newsletter_test
      run: |
        alembic upgrade head
        python scripts/seed_test_data.py || true

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/newsletter_test
        REDIS_URL: redis://localhost:6379/0
        SMTP_HOST: localhost
        SMTP_PORT: 1025
        SMTP_USE_TLS: false
        TESTING: true
      run: |
        pytest tests/test_newsletter_integration.py -v --tb=short
        pytest tests/test_email_sender.py -v --tb=short
        pytest tests/test_api.py -v -k "integration" --tb=short || true

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e' || github.event_name == 'schedule' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: newsletter_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        ollama serve &
        sleep 5
        ollama pull mistral:7b-instruct || true
      continue-on-error: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install playwright pytest-playwright

    - name: Install Playwright browsers
      run: playwright install chromium

    - name: Setup application
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/newsletter_e2e
      run: |
        alembic upgrade head
        python scripts/seed_test_data.py || true

    - name: Start application
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/newsletter_e2e
        TESTING: true
      run: |
        uvicorn newsauto.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Run E2E tests
      run: |
        python scripts/test_newsletter_flow.py --quick

    - name: Test API endpoints
      run: |
        # Health check
        curl -f http://localhost:8000/api/v1/health || exit 1

        # Create newsletter
        curl -X POST http://localhost:8000/api/v1/newsletters \
          -H "Content-Type: application/json" \
          -d '{"name":"E2E Test","description":"Test newsletter","niche":"Technology"}' || true

        # List newsletters
        curl http://localhost:8000/api/v1/newsletters || exit 1

  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust pytest-benchmark memory-profiler

    - name: Setup test database
      run: |
        python -c "from newsauto.core.database import engine; from newsauto.models.base import Base; Base.metadata.create_all(engine)"

    - name: Run performance benchmarks
      run: |
        # Run pytest benchmarks
        pytest tests/ --benchmark-only --benchmark-json=benchmark.json || true

        # Memory profiling
        python -m memory_profiler scripts/test_newsletter_flow.py --quick || true

    - name: Run load tests with Locust
      run: |
        # Start the application
        uvicorn newsauto.api.main:app --host 0.0.0.0 --port 8000 &
        APP_PID=$!
        sleep 10

        # Run Locust tests
        locust -f tests/locustfile.py \
          --host=http://localhost:8000 \
          --users=10 \
          --spawn-rate=1 \
          --run-time=60s \
          --headless \
          --html=locust-report.html || true

        # Stop the application
        kill $APP_PID || true

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: |
          benchmark.json
          locust-report.html
          *.prof

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'security' }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep pip-audit sqlalchemy[mypy]

    - name: Run dependency vulnerability scan
      run: |
        # Check for known vulnerabilities
        safety check --json > safety-report.json || true
        pip-audit --desc > pip-audit-report.txt || true

    - name: Run static security analysis
      run: |
        # Bandit security linter
        bandit -r newsauto/ -f json -o bandit-report.json || true

        # Semgrep security patterns
        semgrep --config=auto newsauto/ --json -o semgrep-report.json || true

    - name: Check for secrets
      run: |
        # Check for hardcoded secrets
        pip install detect-secrets
        detect-secrets scan --baseline .secrets.baseline || true
        detect-secrets audit .secrets.baseline || true

    - name: SQL injection tests
      run: |
        # Test for SQL injection vulnerabilities
        python tests/security/test_sql_injection.py || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          *-report.json
          *-report.txt
          .secrets.baseline

  report-summary:
    name: Test Report Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate test report
      run: |
        echo "# Test Suite Summary" > test-report.md
        echo "" >> test-report.md
        echo "## Test Results" >> test-report.md
        echo "" >> test-report.md
        echo "| Test Suite | Status |" >> test-report.md
        echo "|------------|--------|" >> test-report.md
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> test-report.md
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> test-report.md
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> test-report.md
        echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> test-report.md
        echo "| Security Tests | ${{ needs.security-tests.result }} |" >> test-report.md
        echo "" >> test-report.md

        # Add timestamp
        echo "**Report generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> test-report.md

    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: test-report.md

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('test-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });